# https://swagger.io/docs/specification/about/
openapi: 3.0.1

info:
  title: "Testomato API"
  description: ""
  version: 1.0.0
  contact:
    email: support@testomato.com

servers:
  - url: https://testomato.com/api/
    description: Testomato

paths:
  /project/create:
    post:
      operationId: Create Project
      description: >
        Create a new Project from array of URLs. Successful response will be formatted as [JSONP](https://en.wikipedia.org/wiki/JSONP) stream.         
        You can add **up to 30 URLs** at once.
      tags:
        - Project
      parameters:
        - name: period
          required: false
          description: Check period interval as string
          in: query
          schema:
            type: string
            enum: [ 5 minutes, 30 minutes, 1 hour, 8 hours, 1 day, 7 days, false ]
            default: 5 minutes
      requestBody:
        content:
          application/json:
            schema:
              properties:
                urls:
                  type: array
                  description: Array of URLs
                  example: [ "https://www.example.com", "https://testomato.com" ]
                blank:
                  type: boolean
                  default: false
                  description: Create empty project (`true`) or preset project (`false`)

      responses:
        400:
          description: Error when trying to *create more than 30 projects* at once or `period` parameters is invalid.
        403:
          description: Error when you have reached your **subscription project limit**.
        406:
          description: When you try send invalid or not supported URL
        500:
          description: Project creation failed with fatal error (please contact us at support@testomato.com).
        200:
          description: There Successfully created projects. Response is <a href="https://en.wikipedia.org/wiki/JSONP" target="_blank">JSONP</a> payload with individual projects.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Project"
                  - type: object
                    properties:
                      originalUrl:
                        description: Original URL that was processed
                        type: string

  /project/{id}:
    get:
      operationId: Get Project
      description: Retrieve project by `Project ID`
      security:
        - ApiKey: [ ]
      tags:
        - Project
      parameters:
        - $ref: "#/components/parameters/ProjectId"
      responses:
        404:
          $ref: "#/components/responses/NotFound"
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Project"
                  - type: object
                    properties:
                      permissions:
                        type: object
                        description: Project permissions for current user
                        properties:
                          read:
                            type: boolean
                            description: Can current user view results?
                          run:
                            type: boolean
                            description: Can current user run checks?
                          editTest:
                            type: boolean
                          edit:
                            type: boolean
                            description: Can current user edit project settings?
                          manageUsers:
                            description: Can current user manage others?
                            type: boolean
                          apiKey:
                            description: Can current user view apiKey?
                            type: boolean
                          leave:
                            description: Can current user leave project?
                            type: boolean

    put:
      operationId: Update Project
      description: Update selected project
      tags:
        - Project
      security:
        - ApiKey: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        200:
          $ref: '#/components/responses/SuccessMessage'
        404:
          $ref: "#/components/responses/NotFound"
      parameters:
        - $ref: "#/components/parameters/ProjectId"

    delete:
      operationId: Delete Project
      description: Delete selected Project
      tags:
        - Project
      responses:
        200:
          $ref: '#/components/responses/SuccessMessage'
        404:
          $ref: "#/components/responses/NotFound"
      security:
        - ApiKey: [ ]
      parameters:
        - $ref: "#/components/parameters/ProjectId"

  /project/{id}/status:
    get:
      operationId: Get Project status
      description: Get Project status
      tags:
        - Project
      parameters:
        - $ref: "#/components/parameters/ProjectId"
      responses:
        200:
          description: Successful response - full project status
          content:
            application/json:
              schema:
                properties:
                  project:
                    type: object
                    description: Basic project information
                    properties:
                      id:
                        type: string
                        description: Project ID
                      lastRun:
                        type: integer
                        description: Unix timestamp of last run
                        example: 1665407081
                      lastChange:
                        type: integer
                        description: Unix timestamp of last change
                        example: 1665263416
                      reported:
                        type: string
                        description: Was reported
                        example: ok
                      status:
                        type: string
                      msg:
                        type: string
                        description: Longer message about project status
                        example: Server returned HTTP status 200
                      shortMessage:
                        type: string
                        description: Short project status message
                        example: 200
                  total:
                    type: integer
                    description: Total count of checks
                    example: 12
                  failed:
                    type: integer
                    description: How much check has failed
                    example: 0
                  now:
                    type: integer
                    description: Current date time unix timestamp
                    example: 1665407098
                  tests:
                    type: array
                    items:
                      $ref: '#/components/schemas/Test'

  /project/{id}/simple-status:
    get:
      operationId: Get Project status - simplify
      description: Get simplify Project status
      tags:
        - Project
      parameters:
        - $ref: "#/components/parameters/ProjectId"
      responses:
        200:
          description: Successful response - simplify project status
          content:
            application/json:
              schema:
                properties:
                  tests:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        url:
                          type: string
                        status:
                          type: string
                          enum: [ OK, Error message ]
                    example:
                      - name: Homepage
                        url: https://www.testomato.com
                        status: OK
                      - name: Contact
                        url: https://www.testomato.com/contact
                        status: Missing "example" in Website TEXT
                  total:
                    description: Total count of checks
                    type: integer
                    example: 2
                  failed:
                    description: Count of failing checks
                    example: 1


  /project/{id}/start:
    get:
      operationId: Starts project checks
      description: Start all checks in project
      tags:
        - Project
      parameters:
        - $ref: "#/components/parameters/ProjectId"
      responses:
        200:
          description: 'OL'

  /project/{id}/job/{jobid}/results:
    get:
      description: Retrieve latest Project's checks results
      operationId: Get project results
      tags:
        - Project
      parameters:
        - $ref: "#/components/parameters/ProjectId"
      responses:
        200:
          description: "Ok"


  /project/{id}/regenerateApiKey:
    description: Regenerate project API key

    parameters:
      - name: id
        required: true
        description: Project ID
        in: path
        schema:
          type: string


  /tests/{id}:
    get:
      tags:
        - Checks
      parameters:
        - $ref: "#/components/parameters/TestId"
      responses:
        200:
          description: Test response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"

components:

  parameters:

    ProjectId:
      description: Project ID
      in: path
      name: id
      required: true
      schema:
        type: string

    TestId:
      description: Test ID
      in: path
      name: id
      required: true
      schema:
        type: string

  securitySchemes:

    ApiKey:
      description: Project or User API key
      type: apiKey
      name: apiKey
      in: query

  responses:
    SuccessMessage:
      description: Common success massage
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
              code:
                type: integer
                default: 200
              ok:
                type: boolean
                default: true
              error:
                type: boolean
                default: false
    ErrorMessage:
      description: Common error message
      content:
        application/json:
          schema:
            properties:
              message:
                type: string
                description: Error message text
              code:
                type: integer
                default: 404
              ok:
                type: boolean
                default: false
              error:
                type: boolean
                default: true

    NotFound:
      description: Object not found error
      content:
        application/json:
          schema:
            properties:
              message:
                description: Error message text
                default: Object not found
                type: string
              code:
                description: Error code number
                default: 404
                type: integer
              ok:
                type: boolean
                default: false
              error:
                type: boolean
                default: true
  schemas:
    Project:
      type: object
      properties:
        id:
          description: Project ID
          example: 50a9f72f14db3be812000233
          type: string
        title:
          description: Project title
          type: string
        url:
          description: Project base URL
          type: string
        period:
          description: Period of test checking - `false` means never check Test automatically.
          default: 5 minutes
          enum: [ 5 minutes, 30 minutes, 1 hour, 8 hours, 1 day, 7 days, false ]
          type: string
        uptimeUrl:
          description: Uptime URL
          type: string
        uptimeEnabled:
          description: Uptime period in seconds - `false` means uptime is disabled
          type: string
          enum: [ false, 15, 30, 60 ]
        apiKey:
          description: apiKey that can be used for the project operations
          type: string
        payerId:
          description: Identification of the project owner.
          type: integer
        location:
          description: Project check location
          type: string
          enum: [ eu, de, gb, ca, us, tx, dc, sg, hk ]
        checkDefaultErrors:
          type: boolean
          default: true
        created:
          description: Date and time of project creation
          type: string
          format: date-time
        userAgent:
          description: User agent
          default: Testomatobot/1.0 (Linux x86_64; +https://www.testomato.com/testomatobot) minicrawler/5.2.2
          type: string
        timeout:
          description: Cumulated project timeout in seconds
          type: integer
          default: 3
        delay:
          description: Bulk request delay in miliseconds
          type: integer
          format: int64
          default: 50
        userIds:
          type: array
          description: Array of users ID's with access to the project
          items:
            type: integer
        name:
          description: Project name was replaced by Project title
          type: string
          deprecated: true

    Rule:
      type: object
      properties:
        type:
          type: string
          example: text
          description: Type of check
          enum: [ text html status header location title meta-description meta-og:title meta-og:description meta-og:image meta-og:image meta-og:image meta-og:type meta-og:url meta-og:site_name meta-og:locale meta-og:updated_time meta-og:logo meta-article:modified_time meta-article:published_time meta-article:publisher meta-article:section meta-article:tag meta-twitter:title meta-twitter:image meta-twitter:image meta-twitter:description meta-twitter:card meta-twitter:site meta-twitter:creator meta-itemprop:name meta-itemprop:author meta-itemprop:description meta-itemprop:image ]
        op:
          type: string
          enum: [ eq, sub, '!sub', match, '!match', xpath ]
          example: sub
          description: >
            Operators can be: `eq` is equal to, `sub` contains, `!sub` does not contains, 
            `match` for exact match, `!match` for does not match and `xpath` for Xpath checks.
        val:
          type: string
          example: 123456
          description: Value that will be used for check
        origin:
          type: string
          example: check
          description: Original of the check
        templateId:
          type: string
          description: Optional parameter if check use a Template
        order:
          type: integer
          description: Order of the check

    TestResponse:
      type: object
      properties:
        status:
          type: string
        timing:
          type: array
          items:

    Test:
      type: object
      properties:
        id:
          type: string
          example: 50a9f73014db3ae812000234
          description: Check id
        enabled:
          type: boolean
          default: true
        areaId:
          description: Area ID
        name:
          type: string
          description: Name of check
        url:
          type: string
          description: URL of check
        notice:
          type: string
          description: Check notice
        type:
          type: string
          example: simple
          enum: [ homepage, simple, favicon, robots ]
        run:
          type: string
          example: completed
          enum: [ completed, running ]
        flags:
          type: array
          description: Test flags e.g. `configured`
        status:
          type: object
          properties:
            status:
              type: string
              example: ok
            failures:
              type: array
            rules:
              type: array
              items:
                $ref: '#/components/schemas/Rule'
            response:
              $ref: '#/components/schemas/TestResponse'
